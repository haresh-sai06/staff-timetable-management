import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Clock, User, MapPin, BookOpen, AlertCircle, Save, Edit2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";

interface TimetableEntry {
  id: string;
  day: string;
  timeSlot: string;
  subject: string;
  subjectCode: string;
  staff: string;
  staffRole: string;
  classroom: string;
  studentGroup: string;
  type: string;
  hasConflict?: boolean;
  conflictType?: string;
  isAutoGenerated?: boolean;
}

interface TimetablePreviewProps {
  timetableData: TimetableEntry[];
  onSave: () => void;
  onEdit: (entryId: string, updates: Partial<TimetableEntry>) => void;
  isEditable: boolean;
}

const TimetablePreview = ({ timetableData, onSave, onEdit, isEditable }: TimetablePreviewProps) => {
  const [selectedSlot, setSelectedSlot] = useState<string | null>(null);
  const [editingEntry, setEditingEntry] = useState<string | null>(null);

  const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  const timeSlots = [
    "08:00-09:00", "09:00-10:00", "10:00-11:00", "11:00-12:00",
    "12:00-13:00", "13:00-14:00", "14:00-15:00", "15:00-16:00", "16:00-17:00"
  ];

  // Ensure timetableData is an array
  const validTimetableData = Array.isArray(timetableData) ? timetableData : [];

  const getSlotData = (day: string, timeSlot: string) => {
    return validTimetableData.filter(entry => 
      entry && entry.day === day && entry.timeSlot === timeSlot
    );
  };

  const getTypeColor = (type: string) => {
    return type === "lab" ? "bg-green-100 text-green-800" : "bg-blue-100 text-blue-800";
  };

  const getRoleColor = (role: string) => {
    return role === "Prof" ? "bg-purple-100 text-purple-800" : "bg-blue-100 text-blue-800";
  };

  if (!validTimetableData.length) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-muted-foreground">No timetable data available</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Badge variant="outline" className="bg-muted">
            {validTimetableData.filter(e => e.isAutoGenerated).length} Auto-generated
          </Badge>
          <Badge variant="outline" className="bg-red-100 text-red-800">
            {validTimetableData.filter(e => e.hasConflict).length} Conflicts
          </Badge>
        </div>
        {isEditable && (
          <Button onClick={onSave} className="bg-accent hover:bg-accent/90 text-accent-foreground">
            <Save className="h-4 w-4 mr-2" />
            Save Timetable
          </Button>
        )}
      </div>

      {/* Mobile View */}
      <div className="block md:hidden space-y-4">
        {days.map((day, dayIndex) => (
          <motion.div
            key={day}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: dayIndex * 0.1 }}
          >
            <Card className="glassmorphism-card border-border">
              <CardContent className="p-4">
                <h3 className="font-semibold text-lg mb-3 text-accent">{day}</h3>
                <div className="space-y-2">
                  {timeSlots.map((timeSlot) => {
                    const slotData = getSlotData(day, timeSlot);
                    return (
                      <div key={timeSlot} className="border-l-2 border-border pl-3">
                        <div className="flex items-center space-x-2 mb-1">
                          <Clock className="h-4 w-4 text-muted-foreground" />
                          <span className="text-sm font-medium text-muted-foreground">{timeSlot}</span>
                        </div>
                        {slotData.length > 0 ? (
                          <div className="space-y-2">
                            {slotData.map((entry) => (
                              <motion.div
                                key={entry.id}
                                whileHover={{ scale: 1.02 }}
                                className={`p-3 rounded-lg border relative ${
                                  entry.hasConflict 
                                    ? "border-red-300 bg-red-50" 
                                    : entry.isAutoGenerated
                                    ? "border-green-300 bg-green-50"
                                    : "border-border bg-card/40"
                                }`}
                              >
                                {entry.isAutoGenerated && (
                                  <Badge className="absolute -top-2 -right-2 bg-green-100 text-green-800 text-xs">
                                    Auto
                                  </Badge>
                                )}
                                <div className="flex items-start justify-between">
                                  <div className="flex-1">
                                    <div className="flex items-center space-x-2 mb-1">
                                      <BookOpen className="h-4 w-4 text-accent" />
                                      <span className="font-medium text-sm">{entry.subject}</span>
                                      {entry.hasConflict && (
                                        <AlertCircle className="h-4 w-4 text-red-500" />
                                      )}
                                    </div>
                                    <p className="text-xs text-muted-foreground mb-1">{entry.subjectCode}</p>
                                    <div className="flex items-center space-x-2 mb-1">
                                      <User className="h-3 w-3 text-muted-foreground" />
                                      <span className="text-xs text-foreground">{entry.staff}</span>
                                      <Badge className={`text-xs ${getRoleColor(entry.staffRole)}`}>
                                        {entry.staffRole}
                                      </Badge>
                                    </div>
                                    <div className="flex items-center justify-between">
                                      <div className="flex items-center space-x-1">
                                        <MapPin className="h-3 w-3 text-muted-foreground" />
                                        <span className="text-xs text-foreground">{entry.classroom}</span>
                                      </div>
                                      <Badge className={getTypeColor(entry.type)}>
                                        {entry.type}
                                      </Badge>
                                    </div>
                                  </div>
                                  {isEditable && (
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => setEditingEntry(entry.id)}
                                      className="h-6 w-6 p-0"
                                    >
                                      <Edit2 className="h-3 w-3" />
                                    </Button>
                                  )}
                                </div>
                              </motion.div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-xs text-muted-foreground italic">No class scheduled</div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </div>

      {/* Desktop View */}
      <div className="hidden md:block">
        <Card className="glassmorphism-card border-border">
          <CardContent className="p-6">
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr>
                    <th className="border border-border p-3 bg-muted text-left font-semibold">
                      Time
                    </th>
                    {days.map((day) => (
                      <th key={day} className="border border-border p-3 bg-muted text-center font-semibold min-w-[200px]">
                        {day}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {timeSlots.map((timeSlot, timeIndex) => (
                    <motion.tr
                      key={timeSlot}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: timeIndex * 0.05 }}
                    >
                      <td className="border border-border p-3 bg-muted/50 font-medium text-sm">
                        {timeSlot}
                      </td>
                      {days.map((day) => {
                        const slotData = getSlotData(day, timeSlot);
                        const slotId = `${day}-${timeSlot}`;
                        
                        return (
                          <td
                            key={day}
                            className={`border border-border p-2 h-24 align-top cursor-pointer hover:bg-muted/20 transition-colors ${
                              selectedSlot === slotId ? "bg-accent/10" : ""
                            }`}
                            onClick={() => setSelectedSlot(selectedSlot === slotId ? null : slotId)}
                          >
                            {slotData.length > 0 ? (
                              <div className="space-y-1">
                                {slotData.map((entry) => (
                                  <motion.div
                                    key={entry.id}
                                    whileHover={{ scale: 1.02 }}
                                    className={`p-2 rounded text-xs relative ${
                                      entry.hasConflict
                                        ? "bg-red-100 border border-red-300"
                                        : entry.isAutoGenerated
                                        ? "bg-green-100 border border-green-300"
                                        : "bg-card border border-border"
                                    } shadow-sm`}
                                  >
                                    {entry.isAutoGenerated && (
                                      <div className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full"></div>
                                    )}
                                    <div className="font-medium text-foreground mb-1 leading-tight">
                                      {entry.subject}
                                      {entry.hasConflict && (
                                        <AlertCircle className="h-3 w-3 text-red-500 inline ml-1" />
                                      )}
                                    </div>
                                    <div className="text-muted-foreground mb-1">{entry.subjectCode}</div>
                                    <div className="flex items-center justify-between">
                                      <span className="text-foreground">{entry.staff}</span>
                                      <Badge className={`text-xs ${getRoleColor(entry.staffRole)}`}>
                                        {entry.staffRole}
                                      </Badge>
                                    </div>
                                    <div className="flex items-center justify-between mt-1">
                                      <span className="text-muted-foreground">{entry.classroom}</span>
                                      <Badge className={getTypeColor(entry.type)} variant="secondary">
                                        {entry.type}
                                      </Badge>
                                    </div>
                                  </motion.div>
                                ))}
                              </div>
                            ) : (
                              <div className="h-full flex items-center justify-center">
                                <span className="text-muted-foreground text-xs">Available</span>
                              </div>
                            )}
                          </td>
                        );
                      })}
                    </motion.tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Legend */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5 }}
        className="flex flex-wrap gap-4 justify-center"
      >
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-green-100 border border-green-300 rounded relative">
            <div className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full"></div>
          </div>
          <span className="text-sm text-foreground">Auto-generated</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-red-100 border border-red-300 rounded"></div>
          <span className="text-sm text-foreground">Conflict Detected</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-purple-100 border border-purple-300 rounded"></div>
          <span className="text-sm text-foreground">Professor</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-4 h-4 bg-blue-100 border border-blue-300 rounded"></div>
          <span className="text-sm text-foreground">Assistant Professor</span>
        </div>
      </motion.div>
    </div>
  );
};

export default TimetablePreview;
